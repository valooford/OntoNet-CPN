PREFIX : <http://www.semanticweb.org/baker/ontologies/2020/9/OntoNet-CPN-onlotogy#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?place_i ?token_i ?values
WHERE {
  ### finding appropriate variable values combination to match the condition
  {
    SELECT DISTINCT ?x
    WHERE {
      ?arc_i :comes_to :t1;														# <-- :t1
             :comes_from ?place_i;
             :has_pattern ?patt_i.
      ?place_i :has_marking ?marking_i.
      ?marking_i :has_token ?token_i.	
      ?token_i :has_attribute ?attr_i.
      ?attr_i :has_data ?x;
              :has_index ?attr_i_index.
      ?patt_i :has_variable ?var_i.
      ?var_i :has_name ?var_i_name;
             :has_index ?var_i_index.
      FILTER(?var_i_name = "x" && ?attr_i_index = ?var_i_index)					# <-- "x"
    }
  }
  {
    SELECT DISTINCT ?y
    WHERE {
      ?arc_i :comes_to :t1;														# <-- :t1
             :comes_from ?place_i;
             :has_pattern ?patt_i.
      ?place_i :has_marking ?marking_i.
      ?marking_i :has_token ?token_i.	
      ?token_i :has_attribute ?attr_i.
      ?attr_i :has_data ?y;
              :has_index ?attr_i_index.
      ?patt_i :has_variable ?var_i.
      ?var_i :has_name ?var_i_name;
             :has_index ?var_i_index.
      FILTER(?var_i_name = "y" && ?attr_i_index = ?var_i_index)					# <-- "y"
    }
  }
  
  # binding a condition match
#  BIND((?x = "a") as ?res)
  BIND((true) as ?res)
  
  ### finding appropriate tokens to pass through transition
  ?arc_i :comes_to :t1;														# <-- :t1
         :comes_from ?place_i;
         :has_pattern ?patt_i.
  
  ?place_i :has_marking ?marking_i.
  ?marking_i :has_token ?token_i.	
  
  {
    SELECT ?token_i ?patt_i ?x ?y											# <-- ?x ?y
    WHERE {
      # select ?x
      OPTIONAL {
        SELECT ?token_i ?patt_i ?x
        WHERE {
          ?token_i :has_attribute ?attr_i.
          ?attr_i :has_data ?x;
                  :has_index ?attr_i_index.
          ?patt_i :has_variable ?var_i.
          ?var_i :has_name ?var_i_name;
                 :has_index ?var_i_index.
          FILTER(?var_i_name = "x" && ?attr_i_index = ?var_i_index)			# <-- "x"
        }
      }
      # select ?y
      OPTIONAL {
        SELECT ?token_i ?patt_i ?y
        WHERE {
          ?token_i :has_attribute ?attr_i.
          ?attr_i :has_data ?y;
                  :has_index ?attr_i_index.
          ?patt_i :has_variable ?var_i.
          ?var_i :has_name ?var_i_name;
                 :has_index ?var_i_index.
          FILTER(?var_i_name = "y" && ?attr_i_index = ?var_i_index)			# <-- "y"
        }
      }
    }
  }
  
  # filter ?x (checking for '?x' value existing in every position)
  FILTER (!BOUND(?x) || NOT EXISTS {
    SELECT ?place2_i ?x (COUNT(?attr2_i_data) as ?x2_count)
    WHERE {
      ?arc2_i :comes_to :t1;												# <-- :t1
              :comes_from ?place2_i;
              :has_pattern ?patt2_i.
      ?place2_i :has_marking ?marking2_i.
      ?marking2_i :has_token ?token2_i.
      ?token2_i :has_attribute ?attr2_i.
      ?attr2_i :has_index ?attr2_i_index.
      ?patt2_i :has_variable ?var2_i.
      ?var2_i :has_name ?var2_i_name;
              :has_index ?var2_i_index.
      FILTER(?var2_i_name = "x" && ?attr2_i_index = ?var2_i_index)			# <-- "x"
      OPTIONAL {
        ?attr2_i :has_data ?attr2_i_data;
                 FILTER(?attr2_i_data = ?x)
      }
    }
    GROUP BY ?place2_i ?x
    HAVING (?x2_count = 0)
  })
  
  # filter ?y (checking for '?y' value existing in every position)
  FILTER (!BOUND(?y) || NOT EXISTS {
    SELECT ?place2_i ?y (COUNT(?attr2_i_data) as ?y2_count)
    WHERE {
      ?arc2_i :comes_to :t1;												# <-- :t1
              :comes_from ?place2_i;
              :has_pattern ?patt2_i.
      ?place2_i :has_marking ?marking2_i.
      ?marking2_i :has_token ?token2_i.
      ?token2_i :has_attribute ?attr2_i.
      ?attr2_i :has_index ?attr2_i_index.
      ?patt2_i :has_variable ?var2_i.
      ?var2_i :has_name ?var2_i_name;
              :has_index ?var2_i_index.
      FILTER(?var2_i_name = "y" && ?attr2_i_index = ?var2_i_index)			# <-- "y"
      OPTIONAL {
        ?attr2_i :has_data ?attr2_i_data;
                 FILTER(?attr2_i_data = ?y)
      }
    }
    GROUP BY ?place2_i ?y
    HAVING (?y2_count = 0)
  })
  
  ### binding a variable values set
  BIND((?x + ", " + ?y) as ?values)
}
GROUP BY ?place_i ?token_i ?res ?values
HAVING (?res = true)
ORDER BY ?values